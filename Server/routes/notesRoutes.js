const express = require("express");
const router = express.Router();
const PreviousMeeting = require("../models/PreviousMeeting");
const Notes = require("../models/Notes");
const authenticate = require("../middleware/authMiddleware");
const User = require('../models/User');
const { getAIUpdatedNotes } = require('../utils/summarizeText');

router.post("/save", authenticate , async (req, res) => {
  const { roomid, transcript } = req.body;
  console.log("Before:", transcript);
 
  try {
    let summary = transcript;
    if (transcript) {
      try {
        summary = await getAIUpdatedNotes(transcript);
        console.log("AI Summary:", summary);
      } catch (err) {
        console.warn("AI summarization failed:", err.message);
      }
    }

    const meeting = await PreviousMeeting.findOne({ roomId: roomid });
    if (!meeting) return res.status(404).json({ error: "Meeting not found" });

    const newNote = new Notes({
      meetingId: meeting._id,
      meetingDetails: {
        title: meeting.title,
        date: meeting.date,
        participants: meeting.participants,
        endedAt: meeting.endedAt,
      },
      summary,
      createdBy: req.user.id,
    });

    await newNote.save(); 

    console.log("Saved to notes");

    res.status(200).json({ message: "Meeting and notes saved successfully!", summary });
  } catch (error) {
    console.error("Error saving meeting and notes:", error);
    res.status(500).json({ error: "Failed to save meeting and notes" });
  }
});

// Get all notes
router.get("/notes", authenticate, async (req, res) => {
  try {
    const currentUser = await User.findById(req.user.id);

    let createdByIds = [req.user.id]; // Default: fetch user's own notes

    // If user has a teamLeader, include notes created by their teamLeader
    if (currentUser.teamLeader) {
      createdByIds.push(currentUser.teamLeader);
    }

    const notes = await Notes.find({ createdBy: { $in: createdByIds } }).sort({ date: -1 });

    res.status(200).json({ notes });
  } catch (error) {
    console.error('Error fetching notes:', error);
    res.status(500).json({ error: 'Failed to fetch notes' });
  }
});

// Download notes for a specific meeting
router.get("/download-notes/:meetingId", authenticate, async (req, res) => {
  try {
    const meetingId = req.params.meetingId;
    const note = await Notes.findById(meetingId);

    if (!note) {
      return res.status(404).json({ error: "Notes not found" });
    }

    // Format date nicely
    const meetingDate = new Date(note.meetingDetails.date).toLocaleString("en-US", {
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      hour12: true,
      timeZoneName: "short",
    });

    // Create nicely structured notes content
    const notesContent = 
`==========================================
              MEETING NOTES
==========================================

Meeting Title: 👉 ${note.meetingDetails.title}
Date: 🗓️ ${meetingDate}

------------------------------------------
Summary: ✍🏼
------------------------------------------

${note.summary}

------------------------------------------
Generated by Meeting App 😊😊😊
`;

    const buffer = Buffer.from(notesContent, "utf-8");

    res.setHeader(
      "Content-Disposition",
      `attachment; filename="${note.meetingDetails.title
        .toLowerCase()
        .replace(/\s+/g, "_")}_notes.txt"`
    );
    res.setHeader("Content-Type", "text/plain");
    res.send(buffer);
  } catch (error) {
    console.error("Error downloading notes:", error);
    res.status(500).json({ error: "Failed to download notes" });
  }
});

// Delete Note by meetingId
router.delete('/:id',authenticate, async (req, res) => {
  try {
    const noteId = req.params.id;
    const deletedNote = await Notes.findByIdAndDelete(noteId);

    if (!deletedNote) {
      return res.status(404).json({ message: 'Note not found' });
    }

    res.status(200).json({ message: 'Note deleted successfully' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
});


module.exports = router;
